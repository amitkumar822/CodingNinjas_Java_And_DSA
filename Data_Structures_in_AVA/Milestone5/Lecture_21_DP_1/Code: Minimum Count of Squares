/*
Code: Minimum Count of Squares
Send Feedback
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1
*/



/*************************************************************************************************/
















public class Solution {
	/*-------------------------Dynamic Programming Function--------------------------------------*/
	// private static int minSquarCountDP(int n,int[] storage){
	// 	if(n==0) return 0;
	// 	int minAns = Integer.MAX_VALUE;
	// 	for(int i=1; i*i<=n; i++){
	// 		int currAns;
	// 		if(storage[n-(i*i)]==-1){
	// 				currAns = minSquarCountDP(n-(i*i), storage);
	// 				storage[n-(i*i)] = currAns;
	// 		}else{
	// 			currAns = storage[n-(i*i)];
	// 		}
	// 		if(minAns > currAns){
	// 			minAns = currAns;
	// 		}
	// 	}
	// 	int myAns = 1 + minAns;
	// 	return myAns;
	// }
	/*-------------------------End Dynamic Programming Function--------------------------------------*/

	public static int minCount(int n) {
		//Your code goes here
	/*------------------------Iterative Programming Function-----------------------------------------*/
    	//Time and space Complexity is O(n)
   		 //n>10^4 no Stack OverFlow
  	  	//This is Better to Dynamic Programming
		int[] storage = new int[n+1];
		
		for(int i=1; i<=n; i++){
			int minAns = Integer.MAX_VALUE;
			for(int j=1; j*j<=i; j++){
				int currAns = storage[i-(j*j)];
				if(minAns > currAns){
					minAns = currAns;
				}
			}
			storage[i] = 1+minAns;
		}
		return storage[n];

	/*------------------------End Iterative Programming Function-----------------------------------------*/


	/*-------------------------Dynamic Programming Function--------------------------------------*/
   			 //Time and space Complexity is O(n)
   			 //n>10^4 so Stack OverFlow
			
			// int[] storage = new int[n+1];
			// for(int i=0; i<=n; i++){
			// 	storage[i]=-1;
			// }
			// return minSquarCountDP(n,storage);
	
	/*-------------------------End Dynamic Programming Function--------------------------------------*/
	}

}
